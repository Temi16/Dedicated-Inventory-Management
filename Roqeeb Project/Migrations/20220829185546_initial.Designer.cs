// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Roqeeb_Project.Context;

namespace Roqeeb_Project.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220829185546_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Roqeeb_Project.Entities.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = "87cefbac-fac6-4027-a5b2-406b617a4a2f",
                            Age = 20,
                            Email = "raufroqeeb123@gmail.com",
                            FirstName = "Roqeeb",
                            IsDeleted = false,
                            LastName = "Temidayo",
                            Password = "temi123",
                            UserId = "d711ed06-9e90-4f7c-bc4e-1bf020b50e0f"
                        });
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId1")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<double>("CostPrice")
                        .HasColumnType("double");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.ProductPurchase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductId1")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseId1")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId1");

                    b.HasIndex("PurchaseId1");

                    b.ToTable("ProductPurchases");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.ProductSales", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductId1")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("PurchaseId")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("SalesId")
                        .HasColumnType("int");

                    b.Property<string>("SalesId1")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId1");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SalesId1");

                    b.ToTable("ProductsSales");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Purchase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Sales", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Roqeeb_Project.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "5ccf5712-5846-4e1d-a8fe-4d09d7e37b65",
                            IsDeleted = false,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Roqeeb_Project.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "d711ed06-9e90-4f7c-bc4e-1bf020b50e0f",
                            Email = "raufroqeeb123@gmail.com",
                            FirstName = "Roqeeb",
                            IsDeleted = false,
                            IsEmailConfirmed = false,
                            LastName = "Temidayo",
                            Password = "temi123",
                            Username = "RRT"
                        });
                });

            modelBuilder.Entity("Roqeeb_Project.Identity.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = "e5168225-3628-450d-b2a6-b545078c039b",
                            IsDeleted = false,
                            RoleId = "5ccf5712-5846-4e1d-a8fe-4d09d7e37b65",
                            UserId = "d711ed06-9e90-4f7c-bc4e-1bf020b50e0f"
                        });
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Admin", b =>
                {
                    b.HasOne("Roqeeb_Project.Identity.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Roqeeb_Project.Entities.Admin", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Customer", b =>
                {
                    b.HasOne("Roqeeb_Project.Identity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Roqeeb_Project.Entities.Customer", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Employee", b =>
                {
                    b.HasOne("Roqeeb_Project.Identity.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Roqeeb_Project.Entities.Employee", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Order", b =>
                {
                    b.HasOne("Roqeeb_Project.Entities.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId1");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.ProductPurchase", b =>
                {
                    b.HasOne("Roqeeb_Project.Entities.Product", "Product")
                        .WithMany("ProductPurchase")
                        .HasForeignKey("ProductId1");

                    b.HasOne("Roqeeb_Project.Entities.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId1");

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.ProductSales", b =>
                {
                    b.HasOne("Roqeeb_Project.Entities.Product", "Product")
                        .WithMany("ProductSales")
                        .HasForeignKey("ProductId1");

                    b.HasOne("Roqeeb_Project.Entities.Purchase", null)
                        .WithMany("ProductSales")
                        .HasForeignKey("PurchaseId");

                    b.HasOne("Roqeeb_Project.Entities.Sales", "Sales")
                        .WithMany("Products")
                        .HasForeignKey("SalesId1");

                    b.Navigation("Product");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Roqeeb_Project.Identity.UserRole", b =>
                {
                    b.HasOne("Roqeeb_Project.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("Roqeeb_Project.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Customer", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Product", b =>
                {
                    b.Navigation("ProductPurchase");

                    b.Navigation("ProductSales");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Purchase", b =>
                {
                    b.Navigation("ProductSales");
                });

            modelBuilder.Entity("Roqeeb_Project.Entities.Sales", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Roqeeb_Project.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Roqeeb_Project.Identity.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
